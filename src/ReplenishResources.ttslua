-- Credit for the logic and layout of replenishing resources goes to Steam user K7_Avenger.

function saveReplenishResources()
    return JSON.encode({currentStep=currentStep})
end

function loadReplenishResources(saved_data)
    currentStepTextBox = getObjectFromGUID("67e541")

    coalSupply = getObjectFromGUID('cce2d0')
    oilSupply = getObjectFromGUID('39d679')
    garbageSupply = getObjectFromGUID('02b728')
    uraniumSupply = getObjectFromGUID('b1a8fd')

    loadCurrentStep(saved_data)
end

function loadCurrentStep(saved_data)
    if saved_data ~= "" then --First we check if there was information saved in this script yet
        local loaded_data = JSON.decode(saved_data) --If there is save data, first we convert the string back to a table
        currentStep = loaded_data.currentStep --Then we pull out data out of the table
    else
        currentStep = 1 -- Default value if no save data
    end
end

function initReplenishResources()
    setCurrentStep(currentStep)
end

function setCurrentStep(step)
    currentStep = step
    currentStepTextBox.TextTool.setValue("Step " .. tostring(currentStep))
end

function replenishResources()
    zone = getObjectFromGUID('778d7a')
    zoneObjects = zone.getObjects()
    coalCount = countFromName(zoneObjects,"Coal")
    oilCount = countFromName(zoneObjects,"Oil")
    garbageCount = countFromName(zoneObjects,"Garbage")
    uraniumCount = countFromName(zoneObjects,"Uranium")

    playerCount = #getSeatedPlayers()
    players = playerCount - 1

    -- Table of resources to add == resourceTable[#getSeatedPlayers[currentStep]]
    coalTable = {{3,4,3},{4,5,3},{5,6,4},{5,7,5},{7,9,6}}
    oilTable = {{2,2,4},{2,3,4},{3,4,5},{4,5,6},{5,6,7}}
    garbageTable = {{1,2,3},{1,2,3},{2,3,4},{3,3,5},{3,5,6}}
    uraniumTable = {{1,1,1},{1,1,1},{1,2,2},{2,3,2},{2,3,3}}

    --Add the coal to the market
    coalAdding = coalTable[players][currentStep]
    if #coalSupply.getObjects() < coalAdding then coalAdding = #coalSupply.getObjects() end
    coalZCoords = {12.75, 11.61, 10.41, 8.91, 7.77, 6.57, 5.08, 3.95, 2.74, 1.38, 0.24, -0.96, -2.45, -3.59, -4.79, -6.20, -7.33, -8.54, -9.98, -11.12, -12.32, -13.87, -15.00, -16.20}
    for i = 1, coalAdding do
        local params = {}
        xPos = 13.08
        yPos = 1.78
        zPos = coalZCoords[coalCount + i]
        params.position = {xPos, yPos, zPos}
        coalSupply.takeObject(params)
    end

    --Add the oil to the market
    oilAdding = oilTable[players][currentStep]
    if #oilSupply.getObjects() < oilAdding then oilAdding = #oilSupply.getObjects() end
    oilZCoords = {11.95, 11.12, 10.29, 8.16, 7.33, 6.49, 4.39, 3.54, 2.69, 0.58, -0.25, -1.11, -3.21, -4.06, -4.90, -7.02, -7.82, -8.68, -10.79, -11.65, -12.48, -14.60, -15.43, -16.26}
    for i = 1, oilAdding do
        local params = {}
        xPos = 14.03
        yPos = 0.97
        zPos = oilZCoords[oilCount + i]
        params.position = {xPos, yPos, zPos}
        oilSupply.takeObject(params)
    end

    --Add the garbage to the market
    garbageAdding = garbageTable[players][currentStep]
    if #garbageSupply.getObjects() < garbageAdding then garbageAdding = #garbageSupply.getObjects() end
    garbageZCoords = {12.70, 11.53, 10.41, 8.92, 7.78, 6.61, 5.10, 3.98, 2.83, 1.30, 0.13, -1.00, -2.46, -3.61, -4.80, -6.27, -7.41, -8.53, -10.04, -11.19, -12.32, -13.84, -14.96, -16.16}
    for i = 1, garbageAdding do
        local params = {}
        xPos = 15.04
        yPos = 1.03
        zPos = garbageZCoords[garbageCount + i]
        params.position = {xPos, yPos, zPos}
        garbageSupply.takeObject(params)
    end

    --Add the uranium to the market
    uraniumAdding = uraniumTable[players][currentStep]
    if #uraniumSupply.getObjects() < uraniumAdding then uraniumAdding = #uraniumSupply.getObjects() end
    uraniumXCoords = {14.95, 14.95, 13.28, 13.28, 14.03, 14.03, 14.03, 14.03, 14.03, 14.03, 14.03, 14.03}
    uraniumZCoords = {15.75, 14.21, 15.75, 14.21, 12.81, 9.01, 5.23, 1.44, -2.36, -6.17, -9.94, -13.73}
    for i = 1, uraniumAdding do
        local params = {}
        xPos = uraniumXCoords[uraniumCount + i]
        yPos = 0.96
        zPos = uraniumZCoords[uraniumCount + i]
        params.position = {xPos, yPos, zPos}
        uraniumSupply.takeObject(params)
    end
end

function countFromName(zoneObjects, string)
    count = 0
    for _, object in ipairs(zoneObjects) do
        if object.getName() == string then
            count = count + 1
        end
    end
    return(count)
end
